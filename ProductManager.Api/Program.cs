using Ardalis.Result;using AutoMapper;using FluentValidation;using ProductManager.Api.Interfaces;using ProductManager.Api.Mappings;using ProductManager.Api.Models.DTOs;using ProductManager.Api.Services;using ProductManager.Api.Validator;var builder = WebApplication.CreateBuilder(args);builder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen();builder.Logging.ClearProviders();builder.Logging.AddConsole();builder.Logging.AddDebug();builder.Services.AddMemoryCache();var mapperConfig = new MapperConfiguration(cfg =>{    cfg.AddProfile<MappingProfile>();});IMapper mapper = mapperConfig.CreateMapper();builder.Services.AddSingleton(mapper);builder.Services.AddSingleton<IValidator<ProductInputDTO>, ProductInputValidator>();builder.Services.AddSingleton<IProductService, ProductService>();var app = builder.Build();if (app.Environment.IsDevelopment()){    app.UseSwagger();    app.UseSwaggerUI();}app.UseHttpsRedirection();// GET PRODUCTapp.MapGet("/api/products", async (IProductService productService) => {    var result = await productService.GetAllProducts();        return result.Status switch    {        ResultStatus.Ok => Results.Ok(result.Value),        ResultStatus.Error => Results.Problem(result.Errors.FirstOrDefault()),        _ => Results.StatusCode(500)    };}).WithName("GetAllProducts");// GET PRODUCT by IDapp.MapGet("/api/products/{id}", async (int id, IProductService productService) => {    var result = await productService.GetProductById(id);        return result.Status switch    {        ResultStatus.Ok => Results.Ok(result.Value),        ResultStatus.NotFound => Results.NotFound(result.Errors.FirstOrDefault()),        ResultStatus.Error => Results.Problem(result.Errors.FirstOrDefault()),        _ => Results.StatusCode(500)    };}).WithName("GetProductById");// POST PRODUCTapp.MapPost("/api/products", async (ProductInputDTO productInput, IProductService productService) => {    var result = await productService.AddProduct(productInput);        return result.Status switch    {        ResultStatus.Ok => Results.Created($"/api/products/{result.Value.Id}", result.Value),        ResultStatus.Invalid => Results.BadRequest(result.ValidationErrors),        ResultStatus.Error => Results.Problem(result.Errors.FirstOrDefault()),        _ => Results.StatusCode(500)    };}).WithName("CreateProduct");// PUT PRODUCTapp.MapPut("/api/products/{id}", async (int id, ProductInputDTO productInput, IProductService productService) => {    var result = await productService.UpdateProduct(id, productInput);        return result.Status switch    {        ResultStatus.Ok => Results.NoContent(),        ResultStatus.NotFound => Results.NotFound(result.Errors.FirstOrDefault()),        ResultStatus.Invalid => Results.BadRequest(result.ValidationErrors),        ResultStatus.Error => Results.Problem(result.Errors.FirstOrDefault()),        _ => Results.StatusCode(500)    };}).WithName("UpdateProduct");// DELETE PRODUCTapp.MapDelete("/api/products/{id}", async (int id, IProductService productService) =>    {        var result = await productService.DeleteProduct(id);        return result.Status switch        {            ResultStatus.Ok => Results.NoContent(),            ResultStatus.NotFound => Results.NotFound(result.Errors.FirstOrDefault()),            ResultStatus.Error => Results.Problem(result.Errors.FirstOrDefault()),            _ => Results.StatusCode(500)        };    })    .WithName("DeleteProduct");app.Run();